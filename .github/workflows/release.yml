name: Release (Manual)

on:
  # Enable execution directly from Actions page
  workflow_dispatch:
    inputs:
      bump-version:
        description: 'Bump Level?'
        type: choice
        options:
          - 'major'
          - 'minor'
          - 'patch'
          - 'prerelease'
        required: true
      as-prerelease:
        description: 'As pre-release?'
        type: boolean
        required: true
        default: false

# default token permissions = none
permissions: {}

jobs:
  build:
    name: Verify Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.ref_name }}

      - name: Build Docker Image
        run: |
          docker build -t psr-upload-to-release:latest .

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    concurrency: push
    needs: [build]

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.9.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          root_options: "-vv -c releaserc.toml"
          force: ${{ github.event.inputs.bump-version }}
          prerelease: ${{ github.event.inputs.as-prerelease }}
          changelog: false

      - name: Update Minor Release Tag Reference
        if: steps.release.outputs.released == 'true' && steps.release.outputs.is_prerelease == 'false'
        env:
          FULL_VERSION_TAG: ${{ steps.release.outputs.tag }}
        run: |
          MINOR_VERSION_TAG="$(printf '%s\n' "$FULL_VERSION_TAG" | cut -d. -f1,2)"
          git tag --force --annotate "$MINOR_VERSION_TAG" "${FULL_VERSION_TAG}^{}" -m "$MINOR_VERSION_TAG"
          git push origin "$MINOR_VERSION_TAG" --force

      - name: Update Major Release Tag Reference
        if: steps.release.outputs.released == 'true' && steps.release.outputs.is_prerelease == 'false'
        env:
          FULL_VERSION_TAG: ${{ steps.release.outputs.tag }}
        run: |
          MAJOR_VERSION_TAG="$(printf '%s\n' "$FULL_VERSION_TAG" | cut -d. -f1)"
          git tag --force --annotate "$MAJOR_VERSION_TAG" "${FULL_VERSION_TAG}^{}" -m "$MAJOR_VERSION_TAG"
          git push origin "$MAJOR_VERSION_TAG" --force
